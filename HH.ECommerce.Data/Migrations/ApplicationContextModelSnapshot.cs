// <auto-generated />
using System;
using HH.ECommerce.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace HH.ECommerce.Data.Migrations
{
    [DbContext(typeof(ApplicationContext))]
    partial class ApplicationContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "6.0.11");

            modelBuilder.Entity("HH.ECommerce.Entities.Customer", b =>
                {
                    b.Property<int>("CustomerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Address")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("CustomerType")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("TEXT");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("TEXT");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("TEXT");

                    b.Property<string>("MiddleName")
                        .HasMaxLength(25)
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("TEXT");

                    b.HasKey("CustomerId");

                    b.ToTable("Customer");

                    b.HasData(
                        new
                        {
                            CustomerId = 1,
                            Address = "3008 North Bend River Road",
                            CustomerType = "Customer",
                            DateCreated = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "customer1@email.com",
                            FirstName = "Sheldon",
                            LastName = "Cooper",
                            MiddleName = "Lee",
                            PhoneNumber = "123456789"
                        },
                        new
                        {
                            CustomerId = 2,
                            Address = "4592 Chapel Street",
                            CustomerType = "Customer",
                            DateCreated = new DateTime(2022, 9, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "customer2@email.com",
                            FirstName = "Leonard",
                            LastName = "Hoffsteder",
                            MiddleName = "Lee",
                            PhoneNumber = "12345678910"
                        },
                        new
                        {
                            CustomerId = 3,
                            Address = "2306 Bird Street",
                            CustomerType = "Affiliate",
                            DateCreated = new DateTime(2022, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "customer3@email.com",
                            FirstName = "Penny",
                            LastName = "Jackson",
                            MiddleName = "L.",
                            PhoneNumber = "123456789"
                        },
                        new
                        {
                            CustomerId = 4,
                            Address = "3229 Counts Lane",
                            CustomerType = "Employee",
                            DateCreated = new DateTime(2018, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "customer4@email.com",
                            FirstName = "Amy",
                            LastName = "Fowler",
                            PhoneNumber = "123456789"
                        },
                        new
                        {
                            CustomerId = 5,
                            Address = "1608 Ashton Lane",
                            CustomerType = "Employee",
                            DateCreated = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "customer5@email.com",
                            FirstName = "Raj",
                            LastName = "Koothrappali",
                            PhoneNumber = "123456789"
                        });
                });

            modelBuilder.Entity("HH.ECommerce.Entities.Discount", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsRatePercentage")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Rate")
                        .HasColumnType("decimal(19, 2)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(35)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Discount");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            IsRatePercentage = true,
                            Name = "Affiliate Discount",
                            Rate = 10m,
                            Type = "Affiliate"
                        },
                        new
                        {
                            Id = 2,
                            IsRatePercentage = true,
                            Name = "Employee Discount",
                            Rate = 30m,
                            Type = "Employee"
                        },
                        new
                        {
                            Id = 3,
                            IsRatePercentage = true,
                            Name = "Loyal Customer Discount",
                            Rate = 5m,
                            Type = "Customer"
                        },
                        new
                        {
                            Id = 4,
                            IsRatePercentage = false,
                            Name = "Price Discount",
                            Rate = 5m,
                            Type = "Price"
                        });
                });

            modelBuilder.Entity("HH.ECommerce.Entities.Invoice", b =>
                {
                    b.Property<int>("InvoiceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("CustomerId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("TEXT");

                    b.Property<string>("InvoiceNumber")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("TEXT");

                    b.Property<int>("OrderId")
                        .HasMaxLength(25)
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("OrderTotal")
                        .HasColumnType("decimal(19, 2)");

                    b.Property<decimal>("Total")
                        .HasColumnType("decimal(19, 2)");

                    b.HasKey("InvoiceId");

                    b.HasIndex("CustomerId");

                    b.ToTable("Invoice");

                    b.HasData(
                        new
                        {
                            InvoiceId = 1,
                            CustomerId = 1,
                            DateCreated = new DateTime(2023, 1, 2, 10, 52, 16, 822, DateTimeKind.Local).AddTicks(1179),
                            InvoiceNumber = "SRU001",
                            OrderId = 1,
                            OrderTotal = 0m,
                            Total = 500m
                        },
                        new
                        {
                            InvoiceId = 2,
                            CustomerId = 2,
                            DateCreated = new DateTime(2023, 1, 2, 10, 52, 16, 822, DateTimeKind.Local).AddTicks(2907),
                            InvoiceNumber = "SRU002",
                            OrderId = 2,
                            OrderTotal = 0m,
                            Total = 1500m
                        },
                        new
                        {
                            InvoiceId = 3,
                            CustomerId = 3,
                            DateCreated = new DateTime(2023, 1, 2, 10, 52, 16, 822, DateTimeKind.Local).AddTicks(2912),
                            InvoiceNumber = "SRU003",
                            OrderId = 3,
                            OrderTotal = 0m,
                            Total = 990m
                        },
                        new
                        {
                            InvoiceId = 4,
                            CustomerId = 4,
                            DateCreated = new DateTime(2023, 1, 2, 10, 52, 16, 822, DateTimeKind.Local).AddTicks(2913),
                            InvoiceNumber = "SRU004",
                            OrderId = 4,
                            OrderTotal = 0m,
                            Total = 920m
                        });
                });

            modelBuilder.Entity("HH.ECommerce.Entities.InvoiceDetails", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("DerivedProductCost")
                        .HasColumnType("decimal(19, 2)");

                    b.Property<decimal>("DiscountPrice")
                        .HasColumnType("decimal(19, 2)");

                    b.Property<int>("InvoiceId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsGroceries")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ProductId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("TEXT");

                    b.Property<decimal>("ProductPrice")
                        .HasMaxLength(30)
                        .HasColumnType("TEXT");

                    b.Property<int>("ProductQuantity")
                        .HasMaxLength(30)
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("TotalDerivedCost")
                        .HasColumnType("decimal(19, 2)");

                    b.HasKey("Id");

                    b.HasIndex("InvoiceId");

                    b.ToTable("InvoiceDetails");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DerivedProductCost = 40m,
                            DiscountPrice = 2m,
                            InvoiceId = 1,
                            IsGroceries = false,
                            ProductId = 2,
                            ProductName = "Item 2",
                            ProductPrice = 20m,
                            ProductQuantity = 2,
                            TotalDerivedCost = 38m
                        },
                        new
                        {
                            Id = 2,
                            DerivedProductCost = 482m,
                            DiscountPrice = 20m,
                            InvoiceId = 1,
                            IsGroceries = false,
                            ProductId = 4,
                            ProductName = "Item 4",
                            ProductPrice = 482m,
                            ProductQuantity = 1,
                            TotalDerivedCost = 462m
                        },
                        new
                        {
                            Id = 3,
                            DerivedProductCost = 250m,
                            DiscountPrice = 0m,
                            InvoiceId = 2,
                            IsGroceries = false,
                            ProductId = 40,
                            ProductName = "Item 40",
                            ProductPrice = 50m,
                            ProductQuantity = 5,
                            TotalDerivedCost = 250m
                        },
                        new
                        {
                            Id = 4,
                            DerivedProductCost = 250m,
                            DiscountPrice = 25m,
                            InvoiceId = 3,
                            IsGroceries = false,
                            ProductId = 3,
                            ProductName = "Item 3",
                            ProductPrice = 50m,
                            ProductQuantity = 5,
                            TotalDerivedCost = 225m
                        },
                        new
                        {
                            Id = 5,
                            DerivedProductCost = 400m,
                            DiscountPrice = 20m,
                            InvoiceId = 3,
                            IsGroceries = false,
                            ProductId = 5,
                            ProductName = "Item 5",
                            ProductPrice = 400m,
                            ProductQuantity = 1,
                            TotalDerivedCost = 380m
                        },
                        new
                        {
                            Id = 6,
                            DerivedProductCost = 385m,
                            DiscountPrice = 0m,
                            InvoiceId = 3,
                            IsGroceries = true,
                            ProductId = 15,
                            ProductName = "Item 15",
                            ProductPrice = 77m,
                            ProductQuantity = 5,
                            TotalDerivedCost = 385m
                        },
                        new
                        {
                            Id = 7,
                            DerivedProductCost = 1000m,
                            DiscountPrice = 80m,
                            InvoiceId = 4,
                            IsGroceries = false,
                            ProductId = 105,
                            ProductName = "Item 105",
                            ProductPrice = 200m,
                            ProductQuantity = 5,
                            TotalDerivedCost = 920m
                        });
                });

            modelBuilder.Entity("HH.ECommerce.Entities.Invoice", b =>
                {
                    b.HasOne("HH.ECommerce.Entities.Customer", "Customers")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customers");
                });

            modelBuilder.Entity("HH.ECommerce.Entities.InvoiceDetails", b =>
                {
                    b.HasOne("HH.ECommerce.Entities.Invoice", "Invoice")
                        .WithMany("InvoiceDetails")
                        .HasForeignKey("InvoiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Invoice");
                });

            modelBuilder.Entity("HH.ECommerce.Entities.Invoice", b =>
                {
                    b.Navigation("InvoiceDetails");
                });
#pragma warning restore 612, 618
        }
    }
}
